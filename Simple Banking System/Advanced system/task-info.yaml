type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTestingMethod
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTestingMethod
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {{"id", "INTEGER"}, {"number", "TEXT"}, {"pin", "TEXT"}, {"balance", "INTEGER"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";

                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).equals(correctColumn[1])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram(Main.class);
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTestingMethod
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram(Main.class);
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken!");
            }
        }
    }
  learner_created: false
- name: src/banking/UserInterface.java
  visible: true
  text: |
    package banking;

    public class UserInterface {

        public static void display(boolean logged) {
            if (!logged) {
                System.out.println("1. Create an account\n2. Log into account\n0. Exit");
            } else {
                System.out.println("1. Balance\n2. Log out\n0. Exit");
            }
        }

        public static void farewell(){
            System.out.println("Bye!");
        }

    }
  learner_created: true
- name: src/banking/BankingSystem.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class BankingSystem {

        private final AccountHandler handler;
        private boolean loggedIn;
        private final Scanner scanner;

        public BankingSystem(String dbName) {
            this.handler = new AccountHandler(dbName);
            this.loggedIn = false;
            this.scanner = new Scanner(System.in);
        }

        public void startService() {
            service();
        }

        private void service() {
            String userInput;
            do {
                UserInterface.display(this.loggedIn);
                userInput = this.scanner.next();
            }
            while (!processInput(userInput));
            UserInterface.farewell();
        }

        private boolean processInput(String userInput) {
            if (this.loggedIn) {
                switch (userInput) {
                    case "1":
                        System.out.printf("Balance: %d\n", handler.getCurrentUser().getBalance());
                        break;
                    case "2":
                        this.loggedIn = false;
                        System.out.println("You have successfully logged out!\n");
                        break;
                    case "0":
                        return true;
                }
            } else {
                switch (userInput) {
                    case "1":
                        String[] registerData = handler.register();
                        System.out.printf("Your card has been created\n" +
                                "Your card number:\n" +
                                "%s\n" +
                                "Your card PIN:\n" +
                                "%s\n", registerData[0], registerData[1]);
                        break;
                    case "2":
                        System.out.println("Enter your card number:");
                        String cardNumberEntered = this.scanner.next();
                        System.out.println("Enter your PIN:");
                        String pinEntered = this.scanner.next();
                        if (handler.attemptLoggingIn(cardNumberEntered, pinEntered)) {
                            this.loggedIn = true;
                            System.out.println("You have successfully logged in!\n");
                        } else {
                            System.out.println("Wrong card number or PIN!\n");
                        }
                        break;
                    case "0":
                        return true;
                }
            }
            return false;
        }

    }
  learner_created: true
- name: src/banking/AccountHandler.java
  visible: true
  text: |
    package banking;

    import org.sqlite.SQLiteDataSource;

    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;

    public class AccountHandler {

        private final Map<String, BankAccount> registeredAccounts;
        private final Random randomizer;
        private BankAccount currentUser;
        private final SQLiteDataSource dbSource;

        public AccountHandler(String dbName) {
            this.registeredAccounts = new HashMap<>();
            this.randomizer = new Random();
            this.dbSource = new SQLiteDataSource();
            startDb(dbName);
        }

        private void startDb(String dbName) {
    //        System.out.println("It's happening!");
            this.dbSource.setUrl("jdbc:sqlite:" + dbName);
            try (Connection con = this.dbSource.getConnection()) {
                DatabaseMetaData dbMeta = con.getMetaData();
                ResultSet result = dbMeta.getTables(null, null, "card", null);
                if (!result.next()) {
    //                System.out.println("It happened!");
                    try (Statement statement = con.createStatement()) {
                        String createTableString = "CREATE TABLE card (\n" +
                                "id INTEGER PRIMARY KEY,\n" +
                                "number TEXT,\n" +
                                "pin TEXT,\n" +
                                "balance INTEGER DEFAULT 0\n" +
                                ")";
                        statement.executeUpdate(createTableString);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        // TODO:
        // - logging in
        // - creating a current user object

        public boolean attemptLoggingIn(String cardNumber, String pin) {
    //        BankAccount account = registeredAccounts.get(cardNumber);
            try (Connection con = dbSource.getConnection()) {
                try (Statement statement = con.createStatement()) {
                    String selectStatement = String.format("SELECT * FROM card\n" +
                            "WHERE\n" +
                            "number = '%s'\n" +
                            "AND pin = %s\n" +
                            ";",
                            cardNumber,
                            pin
                    );
                    try (ResultSet queryResult = statement.executeQuery(selectStatement)) {
                        if (queryResult.next()) {
                            this.currentUser = new BankAccount(queryResult.getLong("balance"));
                            return true;
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return false;
    //        if (account == null) {
    //            return false;
    //        } else if (account.getPin().equals(pin)) {
    //            this.currentUser = account;
    //            return true;
    //        } else {
    //            return false;
    //        }
        }

        public String[] register() {
            String newCardNumber = generateCardNumber();
            String newPin = generatePin();
            try (Connection con = dbSource.getConnection()) {
                try (Statement statement = con.createStatement()) {
                    String insertStatement = String.format("INSERT INTO card (number, pin) VALUES\n" +
                            "(%s, %s)",
                            newCardNumber,
                            newPin
                    );
                    statement.executeUpdate(insertStatement);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
    //        this.registeredAccounts.put(newCardNumber, new BankAccount(newPin));
            return new String[] {newCardNumber, newPin};
        }

        private String generatePin() {
            StringBuilder pin = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                pin.append(randomizer.nextInt(10));
            }
            return pin.toString();
        }

        private String generateCardNumber() {
            int[] cardNumberArray = new int[16];
            cardNumberArray[0] = 4;
            cardNumberArray[1] = 0;
            cardNumberArray[2] = 0;
            cardNumberArray[3] = 0;
            cardNumberArray[4] = 0;
            cardNumberArray[5] = 0;
            for (int i = 6; i < 15; i++) {
                cardNumberArray[i] = this.randomizer.nextInt(10);
            }
            cardNumberArray[15] = generateChecksum(cardNumberArray);
            StringBuilder numberBuilder = new StringBuilder();
            for (int num : cardNumberArray) {
                numberBuilder.append(num);
            }
            return numberBuilder.toString();
        }

        private int generateChecksum(int[] cardNumberArray) {
            int sum = 0;
            for (int i = 0; i < 15; i++) {
                int num = cardNumberArray[i];
                sum += luhnNumber(num, i + 1);
            }
            if (sum % 10 == 0) {
                return 0;
            }  else {
                return 10 - (sum % 10);
            }
        }

        private int luhnNumber(int number, int index) {
            if (index % 2 == 1) {
                number *= 2;
            }
            if (number > 9) {
                number -= 9;
            }
            return number;
        }

        public BankAccount getCurrentUser() {
            return this.currentUser;
        }
    }
  learner_created: true
- name: card.s3db
  visible: true
  learner_created: true
- name: src/banking/CurrentUser.java
  visible: true
  text: |
    package banking;

    public class BankAccount {

        private long balance = 0L;
    //    private String pin;

        public BankAccount(long balance) {
            this.balance = balance;
    //        this.pin = pin;
        }

    //    public void setPin(String pin) {
    //        this.pin = pin;
    //    }

    //    public String getPin() {
    //        return this.pin;
    //    }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public long getBalance() {
            return this.balance;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/93/stages/518/implement">JetBrains
    Academy</a>
  time: Wed, 04 Nov 2020 19:45:34 UTC
record: -1
