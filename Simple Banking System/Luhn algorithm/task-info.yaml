type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import banking.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;


    public class SimpleBankSystemTest extends StageTest {


        public SimpleBankSystemTest() {
            super(Main.class);
        }

        private static String correctCardNumber = "";
        private static String correctPin = "";
        private static String incorrectCardNumber = "";
        private static String incorrectPin = "";
        private static boolean isCompleted = false;

        @Override
        public List<TestCase> generate() {
            return List.of(
                //Check card credentials
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {

                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }
                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "1";
                    })
                    .addInput(output -> {

                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }

                        String anotherCardNumber = cardNumberMatcher.group();

                        if (anotherCardNumber.equals(correctCardNumber)) {
                            return new CheckResult(false, "Your program generates two identical card numbers!");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in and log out
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        if (!cardNumberMatcher.find()) {
                            return new CheckResult(false, "You are printing the card number " +
                                "incorrectly. The card number should look like in the example: " +
                                "400000DDDDDDDDDD, where D is a digit.");
                        }

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!pinMatcher.find()) {
                            return new CheckResult(false, "You are printing the card PIN " +
                                "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                                "a digit.");
                        }
                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + correctPin)
                    .addInput(output -> {

                        if (!output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should be signed in after " +
                                "entering the correct card information.");
                        }

                        return "2";
                    })
                    .addInput(output -> {

                        if (!output.toString().toLowerCase().contains("create an account")) {
                            return new CheckResult(false, "The user should be logged out after choosing 'Log out' option");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in with wrong PIN
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number and PIN like in example!");
                        }

                        correctCardNumber = cardNumberMatcher.group();
                        correctPin = pinMatcher.group();

                        Random random = new Random();

                        incorrectPin = correctPin;

                        while (correctPin.equals(incorrectPin)) {
                            incorrectPin = String.valueOf(1000 + random.nextInt(8999));
                        }

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + incorrectPin)
                    .addInput(output -> {

                        if (output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should not be signed in after" +
                                " entering incorrect card information.");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check log in to not existing account
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number " +
                                "and PIN like in example");
                        }

                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        Random random = new Random();

                        incorrectCardNumber = correctCardNumber;

                        while (correctCardNumber.equals(incorrectCardNumber)) {
                            incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
                        }

                        return "2";
                    })
                    .addInput(output -> incorrectCardNumber + "\n" + correctPin)
                    .addInput(output -> {

                        if (output.toString().toLowerCase().contains("successfully")) {
                            return new CheckResult(false, "The user should not be signed" +
                                " in after entering the information of a non-existing card.");
                        }

                        isCompleted = true;
                        return "0";
                    }),

                // Check balance
                new TestCase()
                    .setInput("1")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
                        Matcher pinMatcher = pinPattern.matcher(out);

                        if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                            return new CheckResult(false, "You should output card number and PIN like in example");
                        }

                        correctPin = pinMatcher.group().trim();
                        correctCardNumber = cardNumberMatcher.group();

                        return "2";
                    })
                    .addInput(output -> correctCardNumber + "\n" + correctPin)
                    .addInput(output -> "1")
                    .addInput(output -> {
                        if (!output.toString().contains("0")) {
                            return new CheckResult(false, "Expected balance: 0");
                        }

                        isCompleted = true;
                        return "0";
                    }),
                //Check Luhn algorithm
                new TestCase()
                    .setInput("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n")
                    .addInput(output -> {
                        String out = output.toString().trim().toLowerCase();

                        Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
                        Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

                        boolean isSomeCardFound = false;
                        int foundCards = 0;

                        while (cardNumberMatcher.find()) {

                            foundCards++;

                            if (!isSomeCardFound) {
                                isSomeCardFound = true;
                            }

                            String cardNumber = cardNumberMatcher.group();

                            if (!checkLuhnAlgorithm(cardNumber)) {
                                return new CheckResult(false, String.format("The card number %s doesn’t pass the Luhn algorithm.", cardNumber));
                            }
                        }

                        if (!isSomeCardFound) {
                            return new CheckResult(false, "You should output card number and PIN like in example");
                        }

                        if (foundCards != 20) {
                            return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
                        }

                        isCompleted = true;
                        return "0";
                    })
            );
        }

        @Override
        public CheckResult check(String reply, Object attach) {
            if (!isCompleted)
                return new CheckResult(false, "Looks like your program unexpectedly terminated without choosing 'exit' item");
            else
                isCompleted = false;
            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/UserInterface.java
  visible: true
  text: |
    package banking;

    public class UserInterface {

        public static void display(boolean logged) {
            if (!logged) {
                System.out.println("1. Create an account\n2. Log into account\n0. Exit");
            } else {
                System.out.println("1. Balance\n2. Log out\n0. Exit");
            }
        }

        public static void farewell(){
            System.out.println("Bye!");
        }

    }
  learner_created: true
- name: src/banking/BankAccount.java
  visible: true
  text: |
    package banking;

    public class BankAccount {

        private long balance = 0L;
        private int pin;

        public BankAccount(int pin) {
            this.pin = pin;
        }

        public void setPin(int pin) {
            this.pin = pin;
        }

        public int getPin() {
            return this.pin;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public long getBalance() {
            return this.balance;
        }
    }
  learner_created: true
- name: src/banking/BankingSystem.java
  visible: true
  text: |
    package banking;

    import java.util.Scanner;

    public class BankingSystem {

        private final AccountHandler handler;
        private boolean loggedIn;
        private final Scanner scanner;

        public BankingSystem() {
            this.handler = new AccountHandler();
            this.loggedIn = false;
            this.scanner = new Scanner(System.in);
        }

        public void startService() {
            service();
        }

        private void service() {
            String userInput;
            do {
                UserInterface.display(this.loggedIn);
                userInput = this.scanner.next();
            }
            while (!processInput(userInput));
            UserInterface.farewell();
        }

        private boolean processInput(String userInput) {
            if (this.loggedIn) {
                switch (userInput) {
                    case "1":
                        System.out.printf("Balance: %d\n", handler.getCurrentUser().getBalance());
                        break;
                    case "2":
                        this.loggedIn = false;
                        System.out.println("You have successfully logged out!\n");
                        break;
                    case "0":
                        return true;
                }
            } else {
                switch (userInput) {
                    case "1":
                        long[] registerData = handler.register();
                        System.out.printf("Your card has been created\n" +
                                "Your card number:\n" +
                                "%d\n" +
                                "Your card PIN:\n" +
                                "%d\n", registerData[0], registerData[1]);
                        break;
                    case "2":
                        System.out.println("Enter your card number:");
                        long cardNumberEntered = this.scanner.nextLong();
                        System.out.println("Enter your PIN:");
                        int pinEntered = this.scanner.nextInt();
                        if (handler.attemptLoggingIn(cardNumberEntered, pinEntered)) {
                            this.loggedIn = true;
                            System.out.println("You have successfully logged in!\n");
                        } else {
                            System.out.println("Wrong card number or PIN!\n");
                        }
                        break;
                    case "0":
                        return true;
                }
            }
            return false;
        }

    }
  learner_created: true
- name: src/banking/AccountHandler.java
  visible: true
  text: |
    package banking;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;

    public class AccountHandler {

        private final Map<Long, BankAccount> registeredAccounts;
        private final Random randomizer;
        private BankAccount currentUser;

        public AccountHandler() {
            this.registeredAccounts = new HashMap<>();
            this.randomizer = new Random();
        }

        public boolean attemptLoggingIn(long cardNumber, int pin) {
            BankAccount account = registeredAccounts.get(cardNumber);
            if (account == null) {
                return false;
            } else if (account.getPin() == pin) {
                this.currentUser = account;
                return true;
            } else {
                return false;
            }
        }

        public long[] register() {
            long newCardNumber = generateCardNumber();
            int newPin = randomizer.nextInt(10000);
            this.registeredAccounts.put(newCardNumber, new BankAccount(newPin));
            return new long[] {newCardNumber, (long) newPin};
        }

        private long generateCardNumber() {
            long newCardNumber;
            do {
                newCardNumber = (long) (Math.random() * 10000000000L);
                newCardNumber += 4000000000000000L;
            }
            while(this.registeredAccounts.get(newCardNumber) != null);
            return newCardNumber;
        }

        public BankAccount getCurrentUser() {
            return this.currentUser;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/93/stages/516/implement">JetBrains
    Academy</a>
  time: Wed, 14 Oct 2020 18:25:57 UTC
record: 2
